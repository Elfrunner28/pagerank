import os
import random
import re
import sys
import math 

DAMPING = 0.85
SAMPLES = 1000000


def main():
    random.seed(0)
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
        
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
        
        


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    transition_model_result_dict = {} #ex: {"1.html": 0.05, "2.html": 0.475, "3.html": 0.475}

    num_pages = len(corpus) #gives the total number of pages in the corpus

  
    #ARG PAGE - the page in the func argument

    damping_chance = (1-damping_factor) / num_pages #this is the 1-D chance that the next page is randomly selected

    if len(corpus[page]) == 0: #if the page has no links, then the damping chance is 1/num_pages
        damping_chance = 1/num_pages
    else:
        random_link_probability = DAMPING/len(corpus[page])

    
    #corpus: {"1.html": {"2.html", "3.html"}, "2.html": {"3.html"}, "3.html": {"2.html"}}

    for linkedpage in corpus: #this loops through all the pages in the world
        transition_model_result_dict[linkedpage] = damping_chance #every page has a damping chance of getting selected, regardless if they are linked in the page
        if linkedpage in corpus[page]: #if the page is linked in the original page
            transition_model_result_dict[linkedpage] += random_link_probability #they might be selected at random, so increase their chances

    return transition_model_result_dict
            
        





    


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """

    num_pages = len(corpus)
    #The first sample should be generated by choosing from a page at random.
    pagerank_dict = {page: 0 for page in corpus}
    first_sample = random.choice(list(corpus.keys()))
    pagerank_dict[first_sample] += 1


    #initializing the first sample. incrementing the count of the first sample, and making everything else 0 for the total count dict

    transition_model_result = transition_model(corpus,first_sample,damping_factor) 
    #ex return: {"1.html": 0.05, "2.html": 0.475, "3.html": 0.475}


    
   

    for iteration in range(n):
        pages = list(transition_model_result.keys()) #extract a list of the pages - always the same
        probabilities = list(transition_model_result.values()) #based off previous tranisition model, extract the probabilities for each page
        next_page = random.choices(pages,weights=probabilities,k=1)[0] #randomly select a page based off probabilities as weights
        pagerank_dict[next_page] += 1 #increase the counter of selected page
        transition_model_result = transition_model(corpus,next_page,damping_factor) #find the transition model for this page


    for page in pagerank_dict:
        pagerank_dict[page] /= n
        #this updates pagerank dict so it accurately reflects page rank by using a good outcomes / total outcomes formula

    
    return pagerank_dict
        





def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """

    num_pages = len(corpus)
    #damping chance
    damping_chance = (1-damping_factor)/num_pages

    pagerank_one = {}
    pagerank_two = {}
    pagerank_sum = {}
    for p in corpus:
        pagerank_one[p] = 1/num_pages
        pagerank_two[p] = 1/num_pages
        pagerank_sum[p] = 0
    count = 1
    while True:
        
        for i in corpus:
            for p in pagerank_sum: #loops through all the pages in the corpus
                if len(corpus[i]) == 0:
                    pagerank_sum[p] += (pagerank_one[i]/num_pages) #if a page has no links, it is linked to all pages 
                elif p in corpus[i]: #if the page is linked in the original page
                    pagerank_sum[p] += (pagerank_one[i]/len(corpus[i])) #add the pagerank of the original page / the number of links in the original page to the pagerank sum of the page
        #pagerank sum is the percent chance that the page is selected based off all of its appearances in other pages.
        
        count = 0

        for p in pagerank_two: #loops through all the pages in the corpus
            pagerank_two[p] = damping_chance + damping_factor*pagerank_sum[p] #update the pagerank of the page
            if not math.isclose(pagerank_one[p],pagerank_two[p],abs_tol=0.001): #if the pagerank of the page is not close to the pagerank of the page, then increment the count
                count += 1
            pagerank_one[p] = pagerank_two[p]
            pagerank_sum[p] = 0
        if count == 0:
            break

    
    return pagerank_one



if __name__ == "__main__":
    main()
